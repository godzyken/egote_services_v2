plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {

    namespace = "com.godzy.egote_services_v2"
    compileSdk 34
    ndkVersion = '27.0.11718014 rc1'

    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    lint {
        baseline = file("lint-baseline.xml")
    }

    sourceSets {
        main {
            java.srcDir("src/core/kotlin")
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.godzy.egote_services_v2"
        testApplicationId = "com.godzy.egote_services_v2.test"
        minSdk 28
        targetSdk 34
        versionCode 1
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        versionName = '1'
        signingConfig signingConfigs.debug
        multiDexEnabled true
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        testFunctionalTest true
        testHandleProfiling true
    }

 /*   signingConfigs {
        debug {
            storeFile file('D:\\gitrepo\\projects\\egote_services_v2\\android\\app\\key.properties')
            keyAlias 'AndroidDebugKey'
            keyPassword 'D4t.ebayo'

        }
    }*/

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            minifyEnabled = true
            signingConfig = signingConfigs.debug
        }

        profile {
            debuggable = true
        }

        debug {
            debuggable = true
            testCoverageEnabled = false
            jniDebuggable = true
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation(libs.legacy.support.v13)
    implementation(libs.work.runtime)
    implementation(libs.multidex)
    coreLibraryDesugaring(libs.desugar.jdk.libs)
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly(libs.junit.platform.launcher)
    implementation(libs.orientdb.core)
}

println("BUILD SCRIPT: This is executed during the configuration phase")


configurations {
    // A configuration meant for consumers that need the API of this component
    create("exposedApi") {
        // This configuration is an "outgoing" configuration, it's not meant to be resolved
        isCanBeResolved()
        // As an outgoing configuration, explain that consumers may want to consume it
        assert(canBeConsumed)
    }
    // A configuration meant for consumers that need the implementation of this component
    create("exposedRuntime") {
        isCanBeResolved()
        assert(canBeConsumed)
    }
   // println("test.extendsFrom():::::::: ${test.extendsFrom()}")
}
//println("configurations:::::::: $configurations")

/*java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}*/

/*kotlin {
    compilerOptions {
        // Extension-level common compiler options that are used as defaults
        // for all targets and shared source sets
        allWarningsAsErrors.set(true)
    }
}*/


defaultTasks("testClasses")

tasks.register("task1") {
    println("REGISTER TASK1: This is executed during the configuration phase")
}

tasks.register("task2") {
    println("REGISTER TASK2: This is executed during the configuration phase")
}


tasks.named("task1") {
    println("NAMED TASK1: This is executed during the configuration phase")
    doFirst {
        println("NAMED TASK1 - doFirst: This is executed during the execution phase")
    }
    doLast {
        println("NAMED TASK1 - doLast: This is executed during the execution phase")
    }
}

tasks.named("task2") {
    println("NAMED TASK2: This is executed during the configuration phase")
    doFirst {
        println("NAMED TASK2 - doFirst: This is executed during the execution phase")
    }
    doLast {
        println("NAMED TASK2 - doLast: This is executed during the execution phase")
    }
}


tasks.register("task3") {
    println("REGISTER TASK3: This is executed during the configuration phase")
}

tasks.named("task3") {
    println("NAMED TASK3: This is executed during the configuration phase")
    doFirst {
        println("NAMED TASK3 - doFirst: This is executed during the execution phase")
    }
    doLast {
        println("NAMED TASK3 - doLast: This is executed during the execution phase")
    }
}


tasks.register('resolveDependencies') {
    configurations.each { configuration ->
        if (configuration.name.startsWith("flutter")) {
            configuration.resolve()
        }
    }
}

tasks.named('resolveDependencies') {
    configurations.each { configuration ->
        if (configuration.name.startsWith("flutter")) {
            doFirst {
                configuration.resolve()
                println("NAMED RESOLVEDEPENDENCIES- doFirst: $configuration")
            }
        } else {
            doLast {
                println("NAMED RESOLVEDEPENDENCIES- doFirst: $configuration")
            }
        }
    }
}

tasks.register("copyFiles", Copy) {
    into(layout.buildDirectory.dir('output'))
    // Store the configuration into a variable because referencing the project from the task action
    // is not compatible with the configuration cache.
    var compileClasspath = configurations.create("myConfiguration").getOutgoing()
    from(compileClasspath)
    doFirst {
        println ">> Compilation deps: ${compileClasspath.files.name}"
    }
}
