plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {

    namespace = "com.godzy.egote_services_v2"
    compileSdk 34
    ndkVersion = '27.0.11718014 rc1'

    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    lint {
        baseline = file("lint-baseline.xml")
    }

    sourceSets {
        main {
            java.srcDir("src/core/kotlin")
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.godzy.egote_services_v2"
        minSdk 28
        targetSdk 34
        versionCode 1
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        versionName = '1'
        signingConfig signingConfigs.debug
        multiDexEnabled true
        proguardFiles 'proguard-rules.pro'
        testFunctionalTest true
        testHandleProfiling true
    }

    signingConfigs {
        debug {
            storeFile file('D:\\gitrepo\\projects\\egote_services_v2\\android\\app\\key.properties')
            keyAlias 'AndroidDebugKey'
            keyPassword 'D4t.ebayo'

        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
        profile {
            debuggable true
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation libs.legacy.support.v13
    implementation libs.work.runtime
    coreLibraryDesugaring libs.desugar.jdk.libs
    //implementation(project(":application"))
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly(libs.junit.platform.launcher)
    implementation(libs.orientdb.core)

    /* flutter libs.flutter.embedding.release
     compileFlutterBuildRelease libs.armeabi.v7a.release
     compileFlutterBuildRelease libs.arm64.v8a.release

     compileFlutterBuildProfile libs.flutter.embedding.profile
     compileFlutterBuildProfile libs.armeabi.v7a.profile
     compileFlutterBuildProfile libs.arm64.v8a.profile

     compileFlutterBuildDebug libs.flutter.embedding.debug
     compileFlutterBuildDebug libs.armeabi.v7a.debug
     compileFlutterBuildDebug libs.arm64.v8a.debug*/
//    compileFlutterBuildDebug libs.x86.debug
//    compileFlutterBuildDebug libs.x86_64.debug
}

println("BUILD SCRIPT: This is executed during the configuration phase")


configurations {

    println("configurations:::::::: run")

    compileFlutterBuildRelease.extendsFrom releaseImplementation
    compileFlutterBuildDebug.extendsFrom debugImplementation
    compileFlutterBuildProfile.extendsFrom profileImplementation
    implementation {
        resolutionStrategy.failOnVersionConflict()
        resolutionStrategy.preferProjectModules()
        excludeRules.module.parallelStream()
        println("resolutionStrategy.failOnVersionConflict():::::::: run")
        println("resolutionStrategy.failOnVersionConflict():::::::: $resolutionStrategy")
    }

    println("configurations:::::::: ${implementation.resolutionStrategy {}}")

    /*  create("devConfiguration").resolutionStrategy {

      }*/
    test.extendsFrom()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

tasks.register("task1") {
    println("REGISTER TASK1: This is executed during the configuration phase")
}

tasks.register("task2") {
    println("REGISTER TASK2: This is executed during the configuration phase")
}


tasks.named("task1") {
    println("NAMED TASK1: This is executed during the configuration phase")
    doFirst {
        println("NAMED TASK1 - doFirst: This is executed during the execution phase")
    }
    doLast {
        println("NAMED TASK1 - doLast: This is executed during the execution phase")
    }
}

defaultTasks("testClasses")

tasks.named("task2") {
    println("NAMED TASK2: This is executed during the configuration phase")
    doFirst {
        println("NAMED TASK2 - doFirst: This is executed during the execution phase")
    }
    doLast {
        println("NAMED TASK2 - doLast: This is executed during the execution phase")
    }
}


tasks.register("task3") {
    println("REGISTER TASK3: This is executed during the configuration phase")
}

tasks.named("task3") {
    println("NAMED TASK3: This is executed during the configuration phase")
    doFirst {
        println("NAMED TASK3 - doFirst: This is executed during the execution phase")
    }
    doLast {
        println("NAMED TASK3 - doLast: This is executed during the execution phase")
    }
}

/*tasks.register("run") {
    group = "Application"
    description = "Runs this project as a JVM application."
}*/

tasks.register('resolveDependencies') {
    configurations.each { configuration ->
        if (configuration.name.startsWith("flutter")) {
            configuration.resolve()
        }
    }
}


/*
tasks.register("testjunit") {
    useJUnitPlatform()

    maxHeapSize = "1G"

    testLogging {
        events("passed")
    }
*/
/*    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }*//*

}

tasks.named("testjunit") {
    doFirst {
        println("Test JUnitPlatform: $logging")
    }
    doLast {
        println("Test JUnitPlatform: $logging")

    }

}
*/

